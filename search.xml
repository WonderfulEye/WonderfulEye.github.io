<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python高级语法</title>
      <link href="blog/done/"/>
      <url>blog/done/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、列表推导式"><a href="#一、列表推导式" class="headerlink" title="一、列表推导式"></a>一、列表推导式</h1><h2 id="1、基本格式："><a href="#1、基本格式：" class="headerlink" title="1、基本格式："></a>1、基本格式：</h2><blockquote><p>[<strong>表达式 for 变量 in 旧列表</strong>] 或者 [<strong>表达式 for 变量 in 旧列表 if 条件</strong>]</p></blockquote><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">obj_list = [</span><br><span class="line">&#123;<span class="string">&quot;key&quot;</span>: <span class="string">&quot;day1&quot;</span>, <span class="string">&quot;value&quot;</span>: <span class="string">&quot;大雨哗啦啦啦啦下&quot;</span>, <span class="string">&#x27;tags&#x27;</span>: [<span class="string">&quot;不热&quot;</span>]&#125;,</span><br><span class="line">&#123;<span class="string">&quot;key&quot;</span>: <span class="string">&quot;day2&quot;</span>, <span class="string">&quot;value&quot;</span>: <span class="string">&quot;很热很热，哥哥不在家，我一个人出去旅行&quot;</span>, <span class="string">&#x27;tags&#x27;</span>: [<span class="string">&quot;热&quot;</span>]&#125;,</span><br><span class="line">&#123;<span class="string">&quot;key&quot;</span>: <span class="string">&quot;day3&quot;</span>, <span class="string">&quot;value&quot;</span>: <span class="string">&quot;阴天有时下肉丸&quot;</span>, <span class="string">&#x27;tags&#x27;</span>: [<span class="string">&quot;不热&quot;</span>]&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;--------------------&#x27;</span>)</span><br><span class="line">print(<span class="string">&quot;# 过滤出不热的日子&quot;</span>)</span><br><span class="line">non_hot_days = [d <span class="keyword">for</span> d <span class="keyword">in</span> obj_list <span class="keyword">if</span> <span class="string">&#x27;热&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> d[<span class="string">&#x27;tags&#x27;</span>]]</span><br><span class="line"><span class="keyword">for</span> day <span class="keyword">in</span> non_hot_days:</span><br><span class="line">    print(<span class="string">&quot;* [&#123;&#125;]: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(day[<span class="string">&#x27;key&#x27;</span>], day[<span class="string">&#x27;value&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;--------------------&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="2、携带if条件"><a href="#2、携带if条件" class="headerlink" title="2、携带if条件"></a>2、携带if条件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#再（0，0）到（4，9）闭区间内的横坐标为偶数，纵坐标为奇数的坐标</span></span><br><span class="line">result = [(x,y) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>) <span class="keyword">if</span> x%<span class="number">2</span> == <span class="number">0</span> <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> y%<span class="number">2</span> != <span class="number">0</span>]  </span><br><span class="line">print(result)</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">[(<span class="number">0</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="number">3</span>), (<span class="number">0</span>, <span class="number">5</span>), (<span class="number">0</span>, <span class="number">7</span>), (<span class="number">0</span>, <span class="number">9</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">2</span>, <span class="number">7</span>), (<span class="number">2</span>, <span class="number">9</span>), (<span class="number">4</span>, <span class="number">1</span>), (<span class="number">4</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>), (<span class="number">4</span>, <span class="number">7</span>), (<span class="number">4</span>, <span class="number">9</span>)]</span><br></pre></td></tr></table></figure><p>此代码中（x,y）相当于参数，两个for相当于嵌套循环.</p><h2 id="3、没有if条件"><a href="#3、没有if条件" class="headerlink" title="3、没有if条件"></a>3、没有if条件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">list1 = [[<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">5</span>]]</span><br><span class="line">list2 = [i[-<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> list1]    <span class="comment">#提取内部列表倒数第一个元素</span></span><br><span class="line">list3 = [i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> list1]  <span class="comment">#提取内部列表第0个元素</span></span><br><span class="line">list4 = [i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> list1]   <span class="comment">#提取内部列表第1个元素</span></span><br><span class="line">print(list2)</span><br><span class="line">print(list3)</span><br><span class="line">print(list4)</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">[<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>]</span><br><span class="line">[<span class="number">5</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure><h2 id="4、if…else"><a href="#4、if…else" class="headerlink" title="4、if…else"></a>4、if…else</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;lili&#x27;</span>,<span class="string">&#x27;salary&#x27;</span>:<span class="number">5000</span>&#125;</span><br><span class="line">dict2 = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;lyly&#x27;</span>,<span class="string">&#x27;salary&#x27;</span>:<span class="number">4000</span>&#125;</span><br><span class="line">dict3 = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;salary&#x27;</span>:<span class="number">3500</span>&#125;</span><br><span class="line">dict4 = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;jack&#x27;</span>,<span class="string">&#x27;salary&#x27;</span>:<span class="number">8000</span>&#125;</span><br><span class="line">list1 = [dict1,dict2,dict3,dict4]</span><br><span class="line">newlist = [&#123;<span class="string">&#x27;name&#x27;</span>:<span class="built_in">dict</span>[<span class="string">&#x27;name&#x27;</span>],<span class="string">&#x27;salary&#x27;</span>:<span class="built_in">dict</span>[<span class="string">&#x27;salary&#x27;</span>]+<span class="number">300</span>&#125; <span class="keyword">if</span> <span class="built_in">dict</span>[<span class="string">&#x27;salary&#x27;</span>]&gt;<span class="number">5000</span> <span class="keyword">else</span> &#123;<span class="string">&#x27;name&#x27;</span>:<span class="built_in">dict</span>[<span class="string">&#x27;name&#x27;</span>],<span class="string">&#x27;salary&#x27;</span>:<span class="built_in">dict</span>[<span class="string">&#x27;salary&#x27;</span>]+<span class="number">800</span>&#125; <span class="keyword">for</span> <span class="built_in">dict</span> <span class="keyword">in</span> list1]</span><br><span class="line">print(newlist) </span><br><span class="line"><span class="comment">#&#123;&#x27;name&#x27;:dict[&#x27;name&#x27;],&#x27;salary&#x27;:dict[&#x27;salary&#x27;]+300&#125; 作为参数</span></span><br></pre></td></tr></table></figure><h1 id="二、集合推导式"><a href="#二、集合推导式" class="headerlink" title="二、集合推导式"></a>二、集合推导式</h1><h2 id="1、基本格式"><a href="#1、基本格式" class="headerlink" title="1、基本格式"></a>1、基本格式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">set1 = &#123;x <span class="keyword">for</span> x <span class="keyword">in</span> list1 <span class="keyword">if</span> x&gt;<span class="number">5</span>&#125;</span><br><span class="line">print(set1)</span><br><span class="line">--------------------------------</span><br><span class="line">&#123;<span class="number">8</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line"><span class="comment">#与列表推导式的唯一差别就是在列表的基础上会自动删掉重复项</span></span><br></pre></td></tr></table></figure><h1 id="三、字典推导式"><a href="#三、字典推导式" class="headerlink" title="三、字典推导式"></a>三、字典推导式</h1><h3 id="1、基本格式-1"><a href="#1、基本格式-1" class="headerlink" title="1、基本格式"></a>1、基本格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;b&#x27;</span>:<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;c&#x27;</span>:<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;d&#x27;</span>:<span class="string">&#x27;C&#x27;</span>&#125;</span><br><span class="line">newdict1 = &#123;key:value <span class="keyword">for</span> key,value <span class="keyword">in</span> dict1.items()&#125;</span><br><span class="line">newdict2 = &#123;value:key <span class="keyword">for</span> key,value <span class="keyword">in</span> dict1.items()&#125;</span><br><span class="line">print(newdict1)</span><br><span class="line">print(newdict2)</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;d&#x27;</span>: <span class="string">&#x27;C&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;A&#x27;</span>: <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;B&#x27;</span>: <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;C&#x27;</span>: <span class="string">&#x27;d&#x27;</span>&#125;</span><br><span class="line"><span class="comment">#实现键对值互换</span></span><br></pre></td></tr></table></figure><h1 id="四、生成器"><a href="#四、生成器" class="headerlink" title="四、生成器"></a>四、生成器</h1><blockquote><p>通过列表生成式（列表推导式），我们可以直接创建一个列表，但是，受到内存限制，列表容量肯定是有限的。而且，我们创建一个包含100万个元素的列表，那后面绝大多数元素占用的空间都白白浪费了。所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间，在python中，这种一边循环一边计算的机制，成为生成器：generator</p></blockquote><h2 id="1、通过列表推导式得到生成器"><a href="#1、通过列表推导式得到生成器" class="headerlink" title="1、通过列表推导式得到生成器"></a><strong>1、通过列表推导式得到生成器</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">g = (x*<span class="number">3</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">print(<span class="built_in">type</span>(g))</span><br><span class="line"><span class="comment">#输出则需要借助for循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        e = <span class="built_in">next</span>(g)</span><br><span class="line">        print(e,end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        print(<span class="string">&#x27;没有更过元素了&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">-----------------------------</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">generator</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">0       3       6       9       12      15      18      21      24      27</span></span><br><span class="line"><span class="class">没有更过元素了</span></span><br></pre></td></tr></table></figure><h2 id="2、借助函数完成"><a href="#2、借助函数完成" class="headerlink" title="2、借助函数完成"></a><strong>2、借助函数完成</strong></h2><blockquote><p>斐波那契数列数列的实现</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">length</span>):</span></span><br><span class="line">    n=<span class="number">0</span></span><br><span class="line">    a,b=<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; length:</span><br><span class="line">        <span class="keyword">yield</span> b    <span class="comment">#return b 并且暂停</span></span><br><span class="line">        a,b = b,a+b</span><br><span class="line">        n+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;没有更多元素&#x27;</span>   <span class="comment">#当while循环执行完之后，返回return的值</span></span><br><span class="line">g = fib(<span class="number">8</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        e = <span class="built_in">next</span>(g)</span><br><span class="line">        print(e，end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">&#x27;已经第&#123;&#125;个值&#x27;</span>.<span class="built_in">format</span>(<span class="number">8</span>))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">--------------------------------------------------------------</span><br><span class="line"><span class="number">1</span>       <span class="number">1</span>       <span class="number">2</span>       <span class="number">3</span>       <span class="number">5</span>       <span class="number">8</span>       <span class="number">13</span>      <span class="number">21</span>      已经第<span class="number">8</span>个值</span><br></pre></td></tr></table></figure><h1 id="五、生成器的应用"><a href="#五、生成器的应用" class="headerlink" title="五、生成器的应用"></a>五、生成器的应用</h1><blockquote><p><strong>进程 &gt; 线程 &gt; 协程</strong></p><blockquote><p>概念：比如迅雷下载1.0G的电影，叫做进程，然后迅雷将1.0G的电影按顺序分为10份，这10份叫做线程，然后其中的一份再分为5份，每一份就叫做协程。</p></blockquote></blockquote><h2 id="具体实例"><a href="#具体实例" class="headerlink" title="具体实例"></a>具体实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task1</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        print(<span class="string">&quot;正在搬第&#123;&#125;块砖！&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">        <span class="keyword">yield</span> <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task2</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        print(<span class="string">&quot;正在听第&#123;&#125;首歌！&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">        <span class="keyword">yield</span> <span class="literal">None</span></span><br><span class="line">g1 = task1(<span class="number">6</span>)</span><br><span class="line">g2 = task2(<span class="number">6</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        g1.__next__()</span><br><span class="line">        g2.__next__()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">正在听第<span class="number">0</span>首歌！</span><br><span class="line">正在搬第<span class="number">1</span>块砖！</span><br><span class="line">正在听第<span class="number">1</span>首歌！</span><br><span class="line">正在搬第<span class="number">2</span>块砖！</span><br><span class="line">正在听第<span class="number">2</span>首歌！</span><br><span class="line">正在搬第<span class="number">3</span>块砖！</span><br><span class="line">正在听第<span class="number">3</span>首歌！</span><br><span class="line">正在搬第<span class="number">4</span>块砖！</span><br><span class="line">正在听第<span class="number">4</span>首歌！</span><br><span class="line">正在搬第<span class="number">5</span>块砖！</span><br><span class="line">正在听第<span class="number">5</span>首歌！</span><br></pre></td></tr></table></figure><h1 id="六、迭代器"><a href="#六、迭代器" class="headerlink" title="六、迭代器"></a>六、迭代器</h1><blockquote><p>可迭代的对象：生成器、元组、列表、集合、字典、字符串<br>如何判断一个对象是否可迭代？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>]</span><br><span class="line">f = <span class="built_in">isinstance</span>(list1,Iterable)</span><br><span class="line">print(f) </span><br><span class="line">--------------------------------------------------------------</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><p>生成器是可迭代的，并且是迭代器；列表是可迭代的，但不是迭代器。<br>迭代器只能往前不能往后<br>可以被next()函数调用，不断返回下一个值得对象称为迭代器：Iterator。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>]</span><br><span class="line">list1 = <span class="built_in">iter</span>(list1)</span><br><span class="line">print(<span class="built_in">next</span>(list1))</span><br><span class="line">print(<span class="built_in">next</span>(list1))</span><br><span class="line">print(<span class="built_in">next</span>(list1))</span><br><span class="line">print(<span class="built_in">next</span>(list1))</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><h1 id="七、三元表达式-简单"><a href="#七、三元表达式-简单" class="headerlink" title="七、三元表达式(简单)"></a>七、三元表达式(简单)</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line">result = x <span class="keyword">if</span> x &gt; y <span class="keyword">else</span> y</span><br><span class="line">print(result)</span><br><span class="line">=====================================================</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="八、Python匿名函数"><a href="#八、Python匿名函数" class="headerlink" title="八、Python匿名函数"></a>八、Python匿名函数</h1><h2 id="1、基本介绍"><a href="#1、基本介绍" class="headerlink" title="1、基本介绍"></a>1、基本介绍</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="keyword">lambda</span> [<span class="built_in">list</span>] : expression表达式</span><br></pre></td></tr></table></figure><blockquote><p>解释：定义 lambda 表达式，必须使用 lambda 关键字；[list] 作为可选参数，等同于定义函数是指定的参数列表；name 为该表达式的名称；expression 是一个参数表达式，表达式中出现的参数需要在<code>[list]</code>中有定义，并且表达式只能是单行的，只能有一个表达式</p></blockquote><p>实际等价</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params"><span class="built_in">list</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> 表达式</span><br><span class="line">name(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">num1 , num2</span>):</span></span><br><span class="line">  print(num1 + num2)</span><br><span class="line"><span class="built_in">sum</span>(<span class="number">1</span> , <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 以上函数等价于如下lambda匿名函数</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="keyword">lambda</span> num1 , num2 : print(num1 + num2)</span><br><span class="line"><span class="built_in">sum</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">sum</span> = <span class="keyword">lambda</span> num1 , num2 : num1 + num2</span><br><span class="line">print(<span class="built_in">sum</span>(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">====================输出结果====================</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="2、特性"><a href="#2、特性" class="headerlink" title="2、特性"></a>2、特性</h2><ul><li><p>lambda 函数是匿名的：</p><blockquote><p>所谓匿名函数，通俗讲就是没有名字的函数。lambda函数没有函数名。</p></blockquote></li><li><p>lambda 函数有输入和输出：</p><blockquote><p>输入是传入到参数列表argument_list的值，输出是根据表达式expression计算得到的值</p></blockquote></li><li><p>lambda 函数拥有自己的命名空间：</p><blockquote><p>lambda函数不能访问自己参数列表之外或全局命名空间里的参数，只能完成非常简单的功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">lambda</span> x, y: x*y<span class="comment"># 函数输入是x和y，输出是它们的积x*y</span></span><br><span class="line">&gt;<span class="keyword">lambda</span>:<span class="literal">None</span><span class="comment"># 函数没有输入参数，输出是None</span></span><br><span class="line">&gt;<span class="keyword">lambda</span> *args: <span class="built_in">sum</span>(args)<span class="comment"># 输入是任意个数参数，输出是它们的和(隐性要求输入参数必须能进行算术运算)</span></span><br><span class="line">&gt;<span class="keyword">lambda</span> **kwargs: <span class="number">1</span><span class="comment"># 输入是任意键值对参数，输出是1</span></span><br></pre></td></tr></table></figure></blockquote></li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
